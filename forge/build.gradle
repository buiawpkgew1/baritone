import baritone.gradle.task.CreateDistTask
import baritone.gradle.task.ProguardTask

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = archivesBaseName + "-" + project.name

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig 'mixins.baritone-meteor.json'
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    // because of multiple sourcesets `common project(":")` doesn't work
    for (sourceSet in rootProject.sourceSets) {
        if (sourceSet == rootProject.sourceSets.test) continue
        if (sourceSet == rootProject.sourceSets.schematica_api) continue
        common sourceSet.output
        shadowCommon sourceSet.output
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude("fabric.mod.json")

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"

    manifest {
        attributes(
                'MixinConfigs': 'mixins.baritone-meteor.json',
                "MixinConnector": "baritone.launch.BaritoneMixinConnector",

                'Implementation-Title': 'Baritone',
                'Implementation-Version': version,
        )
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

task proguard(type: ProguardTask) {
    url 'https://github.com/Guardsquare/proguard/releases/download/v7.2.1/proguard-7.2.1.zip'
    extract 'proguard-7.2.1/lib/proguard.jar'
    compType "FORGE"
}

task createDist(type: CreateDistTask, dependsOn: proguard)


build.finalizedBy(createDist)

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}